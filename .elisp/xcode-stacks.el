(defun xstack-cleanup (start end)
  (interactive "r")
  (if (use-region-p)
      (let* ((stack (buffer-substring-no-properties start end))
             (clean (clean-stack stack)))
        (kill-region start end)
        (insert clean)
        (printd clean)
          )))

(defun clean-stack (text)
  (let* ((lines (split-string text "\n"))
         (clean (mapcar 'cleanup-frame lines))
         (org-list (mapcar (lambda (x) (format "- %s" x)) clean))
         )
    (string-join org-list "\n")))

(defun cleanup-frame (line)
  (let* ((function-index (+ 4 (string-match " in " line)))
         (short (substring line function-index))
         (file-index (string-match " at " short)))
    (if file-index (substring short 0 file-index) short)))

(global-set-key "\C-xa" 'eval-buffer)
;;(mapcar '(lambda ( x ) (+ x 2)) '(1 2 3 4 5))
